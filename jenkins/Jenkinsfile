
pipeline {
    agent {
        node {
            label 'dev-server'
        }
    }
    options {
        skipDefaultCheckout true
    }
    environment {
        APP_NAME = "curriculum-skills"
        MAJOR_RELEASE = 0.1
        DOCKER_TAG = "${MAJOR_RELEASE}.${env.BUILD_NUMBER}"
        DOCKER_REG = "harbor.skillab-project.eu"
        DOCKER_REPO = "/skillab-all/"
        DOCKER_REG_CREDS = "harbor-creds"
        /// Tells Python not to create __pycache__ folders.
        PYTHONDONTWRITEBYTECODE = '1'
    }

    stages {
        // *************************
        // *** PREPARATION STAGE ***
        // *************************
        stage('Preparation') {
            steps {
                echo "***** Cleaning Workspace and Checking Out Code *****"
                cleanWs()
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        credentialsId: 'gh-access_token-userpass',
                        url: 'https://github.com/skillab-project/curriculum-skills'
                    ]]
                ])
                sh 'echo "Workspace is now at commit: $(git rev-parse HEAD)"'
            }
        }
        
        // *************************
        // *** IMAGE BUILD STAGE ***
        // *************************
        stage("Build_Docker_Images"){
            steps {
                echo "***** Building Docker Image *****"
                withCredentials([
                    usernamePassword(credentialsId: 'tracker-api-creds', usernameVariable: 'TRACKER_USER', passwordVariable: 'TRACKER_PASS'),
                    string(credentialsId: 'browserless-creds', variable: 'BROWSERLESS_PASS'),
                    string(credentialsId: 'hf-creds', variable: 'HF_PASS')
                ]) {
                    sh '''
                        echo "" >> .env
                        echo "TRACKER_USERNAME=${TRACKER_USER}" >> .env
                        echo "TRACKER_PASSWORD=${TRACKER_PASS}" >> .env
                        echo "BROWSERLESS_WS=${BROWSERLESS_PASS}" >> .env
                        echo "HF_API_TOKEN=${HF_PASS}" >> .env
                        DOCKER_TAG=test docker compose build --no-cache
                    '''
                }
            }
        }

        // ****************************
        // *** Push Images In Harbor ***
        // ****************************
        stage("Push_Image"){
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: "${DOCKER_REG_CREDS}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']
                ]){
                    echo "***** Push Docker Image *****"
                    sh '''
                        docker compose build
                        docker login ${DOCKER_REG} -u ${USERNAME} -p ${PASSWORD}
                        docker image push ${DOCKER_REG}${DOCKER_REPO}${APP_NAME}:${DOCKER_TAG}
                        DOCKER_TAG="latest" docker compose build
                        docker image push ${DOCKER_REG}${DOCKER_REPO}${APP_NAME}:latest
                    '''
                }
            }
        }
        
        // **************
        // *** Deploy ***
        // **************
        stage("Deployment"){
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${DOCKER_REG_CREDS}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]){
                    echo "***** Deploy Application *****"
                    sh 'docker login ${DOCKER_REG} -u ${USERNAME} -p ${PASSWORD}'
                    sh 'docker compose pull'
                    sh 'docker compose up -d'
                    sh 'docker ps'
                }
            }
        }
    }
    post{
        failure{
            // slackSend (color: "#FF0000", message: "Job FAILED: '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
            sh 'docker image rm ${APP_NAME}:test &> /dev/null || true'
            sh 'DOCKER_TAG=test docker compose down --rmi all'
        }
    }
}
